#server:
#  port: 8080
#spring:
#  main:
#    allow-bean-definition-overriding: true
#  shardingsphere:
#    # 打印sql
#    props:
#      sql:
#        show: true
#    # 数据源配置
#    datasource:
#      names: sc
#      sc:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: com.mysql.jdbc.Driver
#        url: jdbc:mysql://42.192.160.109:3306/alarm_sc?useUnicode=true&characterEncoding=utf-8&useSSL=false
#        username: root
#        password: root
#    sharding:
#      # 表策略配置
#      tables:
#        # vehicle_alarm 是逻辑表
#        vehicle_alarm:
#          # 分表节点 可以理解为分表后的那些表 比如 vehicle_alarm_1 ,vehicle_alarm_2
#          actualDataNodes: sc.vehicle_alarm_$->{1..2}
#          tableStrategy:
#            inline:
#              # 根据哪列分表
#              shardingColumn: id
#              # 分表算法 例如：Id为奇数 则为vehicle_alarm_2 id为偶数 vehicle_alarm_1
#              algorithmExpression: vehicle_alarm_$->{id % 2 + 1}
#          # 分表后，sharding-jdbc的全局id生成策略
#          keyGenerator:
#            type: SNOWFLAKE
#            # 对id列采用 sharding-jdbc的全局id生成策略
#            column: id
## mybatis-plus相关配置
#mybatis-plus:
#  type-aliases-package: com.leilei.entity
#  # xml扫描，多个目录用逗号或者分号分隔（告诉 Mapper 所对应的 XML 文件位置）
#  mapper-locations: classpath:com/leilei/mapper/*Mapper.xml
#  global-config:
#    db-config:
#      id-type: auto
#      table-underline: true
#      logic-not-delete-value: 0
#      logic-delete-value: 1
#  configuration:
#    cache-enabled: false
#    map-underscore-to-camel-case: true
##    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

server:
  port: 8080
spring:
  main:
    allow-bean-definition-overriding: true
  shardingsphere:
    # 打印sql
    props:
      sql:
        show: true
    # 数据源配置
    datasource:
      names: sc
      sc:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://xxx:3306/alarm_sc?useUnicode=true&characterEncoding=utf-8&useSSL=false
        username: root
        password: root
    sharding:
#      defaultDatabaseStrategy:
#        standard:
#          shardingColumn: zone
#          preciseAlgorithmClassName:
      # 表策略配置
      tables:
        # vehicle_alarm 是逻辑表
        vehicle_alarm:
          table-strategy:
            standard:
              shardingColumn: device_time
              # 精准分片算法
              preciseAlgorithmClassName: com.leilei.algorithm.TimeSubTablePreciseAlgorithm
              # 范围分片算法
              rangeAlgorithmClassName: com.leilei.algorithm.TimeSubTableRangeAlgorithm
          # 简单使用，就用这个
#          tableStrategy:
#            inline:
#              # 根据哪列分表
#              shardingColumn: id
#              # 分表算法 例如：Id为奇数 则为vehicle_alarm_2 id为偶数 vehicle_alarm_1
#              algorithmExpression: vehicle_alarm_$->{id % 2 + 1}
          # 分表后，sharding-jdbc的全局id生成策略
          keyGenerator:
            type: SNOWFLAKE
            # 对id列采用 sharding-jdbc的全局id生成策略
            column: id
# mybatis-plus相关配置
mybatis-plus:
  type-aliases-package: com.leilei.entity
  # xml扫描，多个目录用逗号或者分号分隔（告诉 Mapper 所对应的 XML 文件位置）
  mapper-locations: classpath:com/leilei/mapper/*Mapper.xml
  global-config:
    db-config:
      id-type: auto
      table-underline: true
      logic-not-delete-value: 0
      logic-delete-value: 1
  configuration:
    cache-enabled: false
    map-underscore-to-camel-case: true
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl